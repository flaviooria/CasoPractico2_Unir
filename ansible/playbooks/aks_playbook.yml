---
- name: "Deploy to AKS"
  hosts: localhost  # Cambié "local" a "localhost" (estándar en Ansible)
  connection: local  # Especifica que las tareas se ejecutan localmente
  vars_files:
    - ../vars/aks_vars.yml
    - ../vars/acr_vars.yml

  tasks:
    # 1. Crear el namespace (dependencia inicial)
    - name: Crear el namespace casopractico2
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ namespace_aks }}"
      register: namespace_result
      retries: 3
      delay: 5
      until: namespace_result is success

    # 2. Aplicar Secretos (necesario antes de los despliegues que lo referencian)
    - name: Aplicar Secretos (db-api-secrets)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: "{{ manifests_dir }}/secrets.yml"
        namespace: "{{ namespace_aks }}"
      register: secrets_result
      retries: 3
      delay: 5
      until: secrets_result is success

    # 3. Aplicar ConfigMap (necesario antes de los despliegues que lo referencian)
    - name: Aplicar ConfigMap de entorno (env-local)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: "{{ manifests_dir }}/env-configmap.yml"
        namespace: "{{ namespace_aks }}"
      register: configmap_result
      retries: 3
      delay: 5
      until: configmap_result is success

    # 4. Aplicar PersistentVolumeClaim (necesario antes del despliegue de la base de datos)
    - name: Aplicar PersistentVolumeClaim (backend-pvc)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: "{{ manifests_dir }}/backend-pvc.yml"
        namespace: "{{ namespace_aks }}"
      register: pvc_result
      retries: 3
      delay: 5
      until: pvc_result is success

    # 5. Aplicar Despliegue de la Base de Datos (depende de Secret, ConfigMap y PVC)
    - name: Aplicar Despliegue de la Base de Datos (postgres-db)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: "{{ manifests_dir }}/db-deployment.yml"
        namespace: "{{ namespace_aks }}"
      register: db_deployment_result
      retries: 3
      delay: 5
      until: db_deployment_result is success

    # 6. Aplicar Servicio de la Base de Datos (depende del despliegue de la DB)
    - name: Aplicar Servicio de la Base de Datos (db-service)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: "{{ manifests_dir }}/db-service.yml"
        namespace: "{{ namespace_aks }}"
      register: db_service_result
      retries: 3
      delay: 5
      until: db_service_result is success

    # 7. Renderizar template de la API Deployment
    - name: Renderizar template de la API Deployment
      ansible.builtin.template:
        src: "{{ templates_path }}/api_deployment.j2"
        dest: "{{ manifests_dir }}/api-deployment.yml"
        mode: "0644"
      vars:
        image: "{{ acr_registry }}/ecommerce_api:casopractico2"

    # 8. Aplicar Despliegue de la API (depende de Secret, ConfigMap y db-service)
    - name: Aplicar Despliegue de la API
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: "{{ manifests_dir }}/api-deployment.yml"
        namespace: "{{ namespace_aks }}"
      register: api_deployment_result
      retries: 3
      delay: 5
      until: api_deployment_result is success

    # 9. Aplicar Servicio de la API (depende del despliegue de la API)
    - name: Aplicar Servicio de la API
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: "{{ manifests_dir }}/api-service.yml"
        namespace: "{{ namespace_aks }}"
      register: api_service_result
      retries: 3
      delay: 5
      until: api_service_result is success

    # 10. Verificar estado de los pods (opcional, para depuración)
    - name: Verificar que los pods estén corriendo
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Pod
        namespace: "{{ namespace_aks }}"
        label_selectors:
          - app in (postgres-db, api)
      register: pod_status
      retries: 10
      delay: 10
      until: >
        pod_status.resources is defined and
        pod_status.resources | length > 0 and
        pod_status.resources | selectattr('status.phase', 'equalto', 'Running') | list | length == pod_status.resources | length
      ignore_errors: true
